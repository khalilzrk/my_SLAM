<?xml version="1.0"?>

<robot name="my_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- Corrected typo in filename from "common_properies.xacro" to "common_properties.xacro" -->
    <xacro:include filename="common_properties.xacro" />
    
    <!-- Defined properties -->
    <xacro:property name="base_length" value="0.6" />
    <xacro:property name="base_width" value="0.4" />
    <xacro:property name="base_height" value="0.2" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_length" value="0.05" />
    <xacro:property name="camera_length" value="0.01" />
    <xacro:property name="camera_width" value="0.05" />
    <xacro:property name="camera_height" value="0.1" />

    <!-- Links -->
    <link name="base_footprint" />
    
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <!-- Corrected property syntax from {base_height / 2.0} to ${base_height / 2.0} -->
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
            <material name="blue" />
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}" />
            </geometry>
            <origin xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
        </collision>
        <!-- Corrected inertia dimensions (removed multiplication by 2) -->
        <xacro:box_inertia m="5.0" l="${base_length}" w="${base_width}" h="${base_height}"
                           xyz="0 0 ${base_height / 2.0}" rpy="0 0 0" />
    </link>
    
    <link name="front_right_wheel">
        <visual>
            <geometry>
                <!-- Updated to use properties for consistency -->
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <!-- Standardized rotation to pi/2 -->
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </collision>
        <!-- Corrected inertia radius (removed multiplication by 2) -->
        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${wheel_length}" xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>
    
    <link name="front_left_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </collision>
        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${wheel_length}" xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>
    
    <link name="back_right_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </collision>
        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${wheel_length}" xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>
    
    <link name="back_left_wheel">
        <visual>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_length}" />
            </geometry>
            <origin xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
        </collision>
        <xacro:cylinder_inertia m="1.0" r="${wheel_radius}" h="${wheel_length}" xyz="0 0 0" rpy="${pi / 2.0} 0 0" />
    </link>
    
    <link name="camera_link">
        <visual>
            <geometry>
                <!-- Corrected to use ${} for property substitution -->
                <box size="${camera_length} ${camera_height} ${camera_width}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 1.57" />
        </visual>
        <collision>
            <geometry>
                <box size="${camera_length} ${camera_height} ${camera_width}" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 1.57" />
        </collision>
        <!-- Updated inertia to match geometry dimensions -->
        <xacro:box_inertia m="0.2" l="${camera_length}" w="${camera_height}" h="${camera_width}"
                           xyz="0 0 0" rpy="0 0 0" />
    </link>
    
    <link name="lidar_link">
        <visual>
            <geometry>
                <cylinder radius="0.05" length="0.02" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.05" length="0.02" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <!-- Corrected inertia to match geometry -->
        <xacro:cylinder_inertia m="1.0" r="0.05" h="0.02" xyz="0 0 0" rpy="0 0 0" />
    </link>
    
    <link name="imu_link">
        <visual>
            <geometry>
                <box size="0.01 0.01 0.05" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </visual>
        <collision>
            <geometry>
                <box size="0.001 0.01 0.05" />
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0" />
        </collision>
        <!-- Updated inertia to match visual geometry -->
        <xacro:box_inertia m="0.2" l="0.01" w="0.01" h="0.05" xyz="0 0 0" rpy="0 0 0" />
    </link>
    
    <!-- Joints -->
    <joint name="base_joint" type="fixed">
        <parent link="base_footprint" />
        <child link="base_link" />
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />
    </joint>
    
    <!-- Corrected z-coordinate to 0 so wheels touch the ground -->
    <joint name="base_front_right_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="front_right_wheel" />
        <origin xyz="0.15 -0.2 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <joint name="base_front_left_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="front_left_wheel" />
        <origin xyz="0.15 0.2 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <joint name="base_back_right_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="back_right_wheel" />
        <origin xyz="-0.15 -0.2 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    <joint name="base_back_left_wheel_joint" type="continuous">
        <parent link="base_link" />
        <child link="back_left_wheel" />
        <origin xyz="-0.15 0.2 0" rpy="0 0 0" />
        <axis xyz="0 1 0" />
    </joint>
    
    <joint name="base_lidar_joint" type="fixed">
        <parent link="base_link" />
        <child link="lidar_link" />
        <origin xyz="0 0 ${base_height}" rpy="0 0 0" />
    </joint>
    <joint name="base_imu_joint" type="fixed">
        <parent link="base_link" />
        <child link="imu_link" />
        <origin xyz="0 0 0.2" rpy="0 0 0" />
    </joint>
    
    <joint name="camera_link_joint" type="fixed">
        <parent link="base_link" />
        <child link="camera_link" />
        <origin xyz="0.3 0 0.1" rpy="0 0 0" />
    </joint>
    
    <!-- Gazebo Plugins -->
    <gazebo reference="camera_link">
     <sensor name="camera" type="camera">
        <pose>0 0 0 0 0 0</pose>
        <always_on>true</always_on>
        <update_rate>30</update_rate>
        <visualize>true</visualize>
        <camera>
            <horizontal_fov>1.047</horizontal_fov>
            <image>
                <width>640</width>
                <height>480</height>
                <format>R8G8B8</format>
            </image>
            <clip>
                <near>0.1</near>
                <far>100</far>
            </clip>
             <noise>
                 <type>gaussian</type>
                 <mean>0.0</mean>
                 <stddev>0.007</stddev>
            </noise>
        </camera>
        <topic>camera</topic>
     </sensor>
    </gazebo>
    <gazebo reference="lidar_link">
    <sensor name="lidar" type="gpu_lidar">
        <always_on>true</always_on>
        <update_rate>10</update_rate>
        <visualize>true</visualize>
        <topic>lidar</topic>
        <lidar>
            <scan>
                <horizontal>
                    <samples>640</samples>
                    <resolution>1.0</resolution>
                    <min_angle>-3.14159</min_angle>
                    <max_angle>3.14159</max_angle>
                </horizontal>
            </scan>
            <range>
                <min>0.15</min>
                <max>12.0</max>
                <resolution>0.01</resolution>
            </range>
        </lidar>
    </sensor>
</gazebo>
<gazebo reference="imu_link">
    <sensor name="imu" type="imu">
        <always_on>true</always_on>
        <update_rate>50</update_rate>
        <visualize>true</visualize>
        <topic>imu</topic>
    </sensor>
</gazebo>
    <gazebo>
        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <left_joint>base_back_left_wheel_joint</left_joint>
            <left_joint>base_front_left_wheel_joint</left_joint>
            <right_joint>base_back_right_wheel_joint</right_joint>
            <right_joint>base_front_right_wheel_joint</right_joint>
            <!-- Corrected wheel separation to 0.4 (distance between wheel centers) -->
            <wheel_separation>0.4</wheel_separation>
            <wheel_radius>0.1</wheel_radius>
            <odom_frame>odom</odom_frame>
        <base_frame>base_footprint</base_frame>
        <publish_tf>true</publish_tf>
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        
        <odom_topic>odometry</odom_topic>
            <odom_publish_frequency>50</odom_publish_frequency>
            
            <max_linear_acceleration>5.0</max_linear_acceleration>
            <min_linear_acceleration>-5.0</min_linear_acceleration>
            <max_angular_acceleration>10.0</max_angular_acceleration>
            <min_angular_acceleration>-10.0</min_angular_acceleration>
            <max_linear_velocity>2.0</max_linear_velocity>
            <min_linear_velocity>-2.0</min_linear_velocity>
            <max_angular_velocity>5.0</max_angular_velocity>
            <min_angular_velocity>-5.0</min_angular_velocity>
            <odom_frame>odom</odom_frame>
            <base_frame>base_footprint</base_frame>
            <publish_tf>true</publish_tf>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <odom_topic>odometry</odom_topic>
            <tf_topic>tf</tf_topic>
            <topic>cmd_vel</topic>
            <!-- Removed <frame_id> and <child_frame_id> to avoid TF conflicts -->
        </plugin>
        
        <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>base_back_left_wheel_joint</joint_name>
            <joint_name>base_back_right_wheel_joint</joint_name>
            <joint_name>base_front_left_wheel_joint</joint_name>
            <joint_name>base_front_right_wheel_joint</joint_name>
        </plugin>
    </gazebo>
    <gazebo reference="front_left_wheel">
    <mu1>1.0</mu1>  <!-- Changed from 0.01 to 1.0 -->
    <mu2>1.0</mu2>
</gazebo>

<gazebo reference="front_right_wheel">
    <mu1>1.0</mu1>  <!-- Changed from 0.01 to 1.0 -->
    <mu2>1.0</mu2>
</gazebo>

<gazebo reference="back_left_wheel">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
</gazebo>

<gazebo reference="back_right_wheel">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
</gazebo>
</robot>